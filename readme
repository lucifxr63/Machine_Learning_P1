# ðŸ“š Machine_Learning_P1

Proyecto de aprendizaje automÃ¡tico desarrollado para predecir **GRD** (Grupos Relacionados de DiagnÃ³stico) a partir de datos clÃ­nicos anonimizados.

---

## ðŸ“‹ DescripciÃ³n General

Este proyecto implementa un pipeline completo que abarca:

- ðŸ”¹ Preprocesamiento de datos clÃ­nicos.
- ðŸ”¹ TokenizaciÃ³n de diagnÃ³sticos y procedimientos.
- ðŸ”¹ Entrenamiento de modelos:
  - Modelos **no neuronales** (Random Forest, Extra Trees, Logistic Regression).
  - Modelos **neuronales MLP** (Multi-Layer Perceptron).
  - Modelos **recurrentes GRU y LSTM**.
- ðŸ”¹ GeneraciÃ³n de mÃ©tricas y grÃ¡ficos:
  - Loss vs Epochs
  - Matriz de ConfusiÃ³n
  - Curvas ROC
- ðŸ”¹ ExportaciÃ³n de modelos entrenados.
- ðŸ”¹ ComparaciÃ³n de predicciones vs valores reales.

---

## ðŸ›  TecnologÃ­as utilizadas

- **Python 3.10**
- **TensorFlow / Keras**
- **Scikit-learn**
- **Pandas, Numpy**
- **Matplotlib**

---

## ðŸ“‚ Estructura del repositorio

```plaintext
â”œâ”€â”€ DataSets/
â”‚   â””â”€â”€ DataSetTokenizados.csv          # Dataset procesado
â”‚
â”œâ”€â”€ graficos_neuronales/
â”‚   â””â”€â”€ (Loss, ROC, Matriz ConfusiÃ³n de MLP)
â”‚
â”œâ”€â”€ graficos_rnn/
â”‚   â””â”€â”€ (Loss, ROC, Matriz ConfusiÃ³n de GRU/LSTM)
â”‚
â”œâ”€â”€ graficos_no_neuronales/
â”‚   â””â”€â”€ (GrÃ¡ficos de modelos RandomForest, ExtraTrees, Logistic Regression)
â”‚
â”œâ”€â”€ modelo_secuencial/
â”‚   â”œâ”€â”€ modelo_CDM_secuencial.h5        # Modelo para CDM
â”‚   â”œâ”€â”€ modelo_Tipo_secuencial.h5        # Modelo para Tipo GRD
â”‚   â””â”€â”€ modelo_GRD_secuencial.h5         # Modelo para GRD final
â”‚
â”œâ”€â”€ MLP.py                               # Entrenamiento MLP
â”œâ”€â”€ GRU_Y_LSTM.py                        # Entrenamiento GRU y LSTM
â”œâ”€â”€ Prueba_no_neuronales.py              # Modelos RandomForest, ExtraTrees, Logistic Regression
â”œâ”€â”€ LimpiezaDatos.ipynb                  # Notebook de limpieza y anÃ¡lisis inicial
â”œâ”€â”€ Tokenizacion.ipynb                   # TokenizaciÃ³n de diagnÃ³sticos y procedimientos
â”œâ”€â”€ Pruebas.ipynb                        # Evaluaciones adicionales
â””â”€â”€ README.md
```

---

## ðŸ“ˆ MetodologÃ­a de Trabajo

**Preprocesamiento:**
- NormalizaciÃ³n de tokens de diagnÃ³stico y procedimientos principales/secundarios.
- CreaciÃ³n de variables adicionales (edad, sexo).

**Modelado Secuencial:**
- Se entrena primero el modelo de **CDM**.
- Luego el modelo de **Tipo GRD** usando como input la predicciÃ³n del CDM.
- Finalmente el modelo de **GRD completo** usando predicciÃ³n de CDM + Tipo GRD.

**EvaluaciÃ³n:**
- Reportes de Accuracy, Precision, Recall, F1-Score (macro y weighted).
- Curvas ROC multicategorÃ­a.
- GrÃ¡ficos de pÃ©rdida durante entrenamiento.

**ExportaciÃ³n:**
- Guardado de modelos `.h5`.
- Guardado de clases de LabelEncoder `.npy`.
- GeneraciÃ³n de CSV de predicciones y mÃ©tricas.

---

## ðŸ“Š Resultados esperados

Accuracy en test set para cada tarea:

- ðŸ“Œ **CDM**: alrededor del **91%**.
- ðŸ“Œ **Tipo GRD**: alrededor del **97%**.
- ðŸ“Œ **GRD completo**: alrededor del **81%**.

_(Ver detalles en `resultados_mlp.csv` y grÃ¡ficos asociados.)_

---
